@startuml
class AutoMapperProfile {
    + AutoMapperProfile()
}
Profile <|-- AutoMapperProfile
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class Startup {
    + Startup(configuration:IConfiguration)
    + Configuration : IConfiguration <<get>>
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
class WeatherForecast {
    + Date : DateTime <<get>> <<set>>
    + TemperatureC : int <<get>> <<set>>
    + TemperatureF : int <<get>>
    + Summary : string <<get>> <<set>>
}
class AuthController {
    - <<readonly>> _authRepository : IAuthRepository
    + AuthController(authRepository:IAuthRepository)
    + <<async>> Register(request:UserRegistrationDTO) : Task<IActionResult>
}
ControllerBase <|-- AuthController
class CharacterController {
    - <<readonly>> _characterService : ICharacterService
    + CharacterController(characterService:ICharacterService)
    + <<async>> GetAll() : Task<IActionResult>
    + <<async>> GetById(id:int) : Task<IActionResult>
    + <<async>> CreateNew(addCharacterDTO:AddCharacterDTO) : Task<IActionResult>
    + <<async>> Update(getCharacterDTO:Character) : Task<IActionResult>
}
ControllerBase <|-- CharacterController
class WeatherForecastController {
    - {static} <<readonly>> Summaries : string[]
    - <<readonly>> _logger : ILogger<WeatherForecastController>
    + WeatherForecastController(logger:ILogger<WeatherForecastController>)
    + Get() : IEnumerable<WeatherForecast>
}
ControllerBase <|-- WeatherForecastController
class DataContext {
    + DataContext(options:DbContextOptions<DataContext>)
    + Characters : DbSet<Character> <<get>> <<set>>
    + Users : DbSet<User> <<get>> <<set>>
}
DbContext <|-- DataContext
class InitialCreate <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- InitialCreate
class InitialCreate <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class UsersAndCharacters <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- UsersAndCharacters
class UsersAndCharacters <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class DataContextModelSnapshot <<partial>> {
    # <<override>> BuildModel(modelBuilder:ModelBuilder) : void
}
ModelSnapshot <|-- DataContextModelSnapshot
class Character {
    + Id : int <<get>> <<set>>
    + Name : string <<get>> <<set>> = "Frodo"
    + HitPoints : int <<get>> <<set>> = 100
    + Stength : int <<get>> <<set>> = 10
    + Defense : int <<get>> <<set>> = 10
    + Intelligence : int <<get>> <<set>> = 10
    + Class : RpgClass <<get>> <<set>>
    + User : User <<get>> <<set>>
}
enum RpgClass {
    Knight= 1,
    Mage= 2,
    Cleric= 3,
    Healer= 4,
}
class "ServiceResponse`1"<T> {
    + Data : T <<get>> <<set>>
    + Success : bool <<get>> <<set>> = true
    + Message : string <<get>> <<set>> = null
}
class User {
    + Id : int <<get>> <<set>>
    + Username : string <<get>> <<set>>
    + PasswordHash : byte[] <<get>> <<set>>
    + PasswordSalt : byte[] <<get>> <<set>>
    + Characters : List<Character> <<get>> <<set>>
}
class CharacterService {
    - <<readonly>> _charactersRepository : ICharactersRepository
    - <<readonly>> _mapper : IMapper
    + CharacterService(mapper:IMapper, charactersRepository:ICharactersRepository)
    + <<async>> CreateNew(addCharacterDTO:AddCharacterDTO) : Task<List<Character>>
    + <<async>> GetAll() : Task<List<Character>>
    + <<async>> GetById(id:int) : Task<Character>
    + <<async>> Update(updateCharacterDTO:Character) : Task<List<Character>>
    + Delete(id:int) : Task<List<Character>>
}
ICharacterService <|-- CharacterService
interface ICharacterService {
    GetAll() : Task <List<Character>>
    GetById(id:int) : Task<Character>
    CreateNew(addCharacterDTO:AddCharacterDTO) : Task<List<Character>>
    Update(updateCharacterDTO:Character) : Task<List<Character>>
    Delete(id:int) : Task<List<Character>>
}
class AddCharacterDTO {
    + Name : string <<get>> <<set>> = "Frodo"
    + HitPoints : int <<get>> <<set>> = 100
    + Stength : int <<get>> <<set>> = 10
    + Defense : int <<get>> <<set>> = 10
    + Intelligence : int <<get>> <<set>> = 10
    + Class : RpgClass <<get>> <<set>>
}
class GetCharacterDTO {
    + Id : int <<get>> <<set>>
    + Name : string <<get>> <<set>> = "Frodo"
    + HitPoints : int <<get>> <<set>> = 100
    + Stength : int <<get>> <<set>> = 10
    + Defense : int <<get>> <<set>> = 10
    + Intelligence : int <<get>> <<set>> = 10
    + Class : RpgClass <<get>> <<set>>
}
class UpdateCharacterDTO {
    + Id : int <<get>> <<set>>
    + Name : string <<get>> <<set>> = "Frodo"
    + HitPoints : int <<get>> <<set>> = 100
    + Stength : int <<get>> <<set>> = 10
    + Defense : int <<get>> <<set>> = 10
    + Intelligence : int <<get>> <<set>> = 10
    + Class : RpgClass <<get>> <<set>>
}
class UserRegistrationDTO {
    + Username : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
}
interface IAuthRepository {
    Register(user:User, password:string) : Task<int>
    Login(username:string, password:string) : Task<string>
    UserExists(username:string) : Task<bool>
}
interface ICharactersRepository {
    GetAllCharacters() : Task<List<Character>>
    Create(character:Character) : Task<List<Character>>
    Update(character:Character) : Task<List<Character>>
    Delete(character:GetCharacterDTO) : Task
}
class AuthRepository {
    - <<readonly>> _context : DataContext
    + AuthRepository(context:DataContext)
    + <<async>> Register(user:User, password:string) : Task<int>
    + Login(username:string, password:string) : Task<string>
    + <<async>> UserExists(username:string) : Task<bool>
    - CreatePasswordHash(password:string, passwordHash:byte[], passwordSalt:byte[]) : void
}
IAuthRepository <|-- AuthRepository
class CharactersRepository {
    - <<readonly>> _context : DataContext
    - <<readonly>> _mapper : IMapper
    + CharactersRepository(context:DataContext, mapper:IMapper)
    + <<async>> GetAllCharacters() : Task<List<Character>>
    + <<async>> Create(character:Character) : Task<List<Character>>
    + <<async>> Update(Updatedcharacter:Character) : Task<List<Character>>
    + Delete(character:GetCharacterDTO) : Task
}
ICharactersRepository <|-- CharactersRepository
@enduml
